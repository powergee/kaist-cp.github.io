- title: "Expediting Hazard Pointers with Bounded RCU Critical Sections"
  authors: [
    "jeonghyeon.kim",
    "jaehwang.jung",
    "jeehoon.kang",
  ]
  venue: "ACM Symposium on Parallelism in Algorithms and Architectures"
  venue_short: "SPAA"
  year: 2024
  status: "to appear"
  tags: [
    "gc",
  ]
  website: /gc

  abstract:
    "Reclamation schemes for concurrent data structures tackle the challenge of
    synchronizing memory accesses and reclamation. Early schemes faced a
    tradeoff between robustness and efficiency: hazard pointers (HP) bounds the
    number of unreclaimed nodes, but it is inefficient due to per-node
    protection; and RCU sacrifices robustness for efficiency as a single thread
    may block the entire reclamation. Recent schemes attempt to break the
    tradeoff by sending signals to blocking threads to abort their operations.
    However, they are (1) inefficient due to starvation in long-running
    operations and frequent signals, and (2) inapplicable to a wide class of
    data structures.
    <br />
    We design a novel reclamation scheme that overcomes the above limitations.
    To address the long-running operations and applicability, we propose
    <em>HP-RCU</em>, integrating RCU-expedited traversal that alternates between HP and
    RCU phases. To additionally ensure robustness against stalled threads, we
    develop <em>HP-BRCU</em> by modularly replacing RCU with bounded RCU (BRCU) that
    efficiently bounds the duration of RCU phases by rarely sending signals. We
    show that HP-BRCU is robust, widely applicable, and as efficient as RCU,
    outperforming robust schemes across various workloads."

- title: "Concurrent Immediate Reference Counting"
  authors: [
    "jaehwang.jung",
    "jeonghyeon.kim",
    "Matthew J. Parkinson",
    "jeehoon.kang",
  ]
  venue: "ACM SIGPLAN conference on Programming Languages Design and Implementation"
  venue_short: "PLDI"
  year: 2024
  status: "to appear"
  tags: [
    "gc",
  ]
  website: /gc

  abstract:
    "Memory management for optimistic concurrency in unmananged programming
    languages is challenging. Safe memory reclamation (SMR) algorithms help
    address this, but they are difficult to use correctly. Automatic reference
    counting provides a simpler interface, but it has been less efficient than
    SMR algorithms. Recently, there has been a push to apply the optimizations
    used in garbage collectors for managed languages to elide reference count
    updates from local references. Notably, Fast Reference Counter, OrcGC, and
    Concurrent Deferred Reference Counting use SMR algorithms to protect local
    references by deferring decrements or reclamation. While they show a
    significant performance improvement, their use of deferral may result in
    growing memory usage due to slow reclamation of linked structures, and
    suboptimal performance in update-heavy workloads.
    <br />
    We present <em>Concurrent Immediate Reference Counting</em> (CIRC), a new
    combination of SMR algorithms with reference counting. CIRC employs
    deferral like other modern methods, but it avoids their problems with novel
    algorithms for (1) immediately reclaiming linked structures recursively by
    tracking the reachability of each object, and (2) applying decrements
    immediately and deferring only the reclamation. Our experiments show that
    CIRC's memory usage does not grow over time and is only slightly higher
    than the underlying SMR. Moreover, CIRC further narrows the performance gap
    between the underlying SMR, positioning it as a promising solution to safe
    automatic memory management for highly concurrent data structures in
    unmananged languages."

- title: "A Proof Recipe for Linearizability in Relaxed Memory Separation Logic"
  authors: [
    "sunho.park",
    "jaewoo.kim",
    "Ike Mulder",
    "jaehwang.jung",
    "janggun.lee",
    "Robbert Krebbers",
    "jeehoon.kang",
  ]
  venue: "ACM SIGPLAN conference on Programming Languages Design and Implementation"
  venue_short: "PLDI"
  year: 2024
  status: "to appear"

  abstract:
    "Linearizability is the de facto standard for correctness of concurrent 
    objects—it essentially says that all the object's operations behave as if 
    they were atomic. There have been a number of recent advances in developing 
    increasingly strong linearizability specifications for relaxed memory 
    consistency (RMC), but scalable <em>proof methods</em> for these specifications 
    do not exist due to the challenges arising from out-of-order executions 
    (requiring event reordering) and selected synchronization (requiring tracking 
    of view transfers).
    <br />
    We propose a proof recipe for the <em>linearizable history specifications</em>
    by Dang et al. in the Iris-based iRC11 concurrent separation logic in Coq. 
    Key to our proof recipe is the notion of <em>object modification order</em> (OMO),
    which generalizes the modification order of the C11 memory model to an object-local 
    setting. Using OMO we minimize the conditions that need to be proved for event 
    reordering. To enable proof reuse for concurrent libraries that are built on
    top of others, OMO provides the novel notion of a <em>commit-with relation</em> 
    that connects the linearization points of the lower and upper libraries. 
    Using our recipe, we verify the linearizability of the Michael–Scott queue, 
    the elimination stack, and Folly’s MPMC queue in RMC for the first time; and verify
    stronger specifications of a spinlock and atomic reference counting in RMC than prior work."

- title: "Modular Hardware Design of Pipelined Circuits with Hazards"
  authors: [
    "minseong.jang",
    "jungin.rhee",
    "woojin.lee",
    "shuangshuang.zhao",
    "jeehoon.kang",
  ]
  venue: "ACM SIGPLAN conference on Programming Languages Design and Implementation"
  venue_short: "PLDI"
  year: 2024
  status: "to appear"

  abstract:
    "Modular design is critical in reducing hardware designer's cognitive load and
    development cost. However, it is challenging to modularize high-performance
    pipelined circuits with structural, data, and control hazards because their
    resolution---stalling, and bypassing, and discard-and-restarting---introduce
    cross-stage dependencies. The dependencies could potentially mandate monolithic
    control logic and create combinational loops, hindering modular design. An
    effective method to modularize pipelined circuits is valid-ready interfaces, but
    they apply to a relatively simple form of pipelined circuits only with structural
    hazards.
    <br />
    We propose hazard interfaces, a generalization of valid-ready interfaces that can
    modularize pipelined circuits not only with structural but also with data and control
    hazards. The key idea is enveloping the cross-stage dependencies within interfaces.
    We also design combinators for hazard interfaces in the style of map-reduce that
    facilitate decomposition of control logic. We implement a compiler (to synthesizable
    Verilog) for a prototype language supporting hazard interfaces and combinators,
    and design a sound and efficient type checker that proves the absence of combinational
    loops. With case studies on 5-stage RISC-V CPU core and 100Gbps Ethernet NIC,
    we demonstrate that hazard interfaces indeed facilitate modular design while
    incurring no noticeable cost in performance, power, and area over reference
    designs in Chisel and Verilog."

- title: "Modular Verification of Safe Memory Reclamation in Concurrent Separation Logic"
  authors: [
    "jaehwang.jung",
    "janggun.lee",
    "jaemin.choi",
    "jaewoo.kim",
    "sunho.park",
    "jeehoon.kang",
  ]
  venue: "Object-oriented Programming, Systems, Languages, and Applications"
  venue_short: "OOPSLA"
  year: 2023
  tags: [
    "gc",
  ]
  website: /gc
  doi: 10.1145/3622827
  copy_local: https://drive.google.com/file/d/1hBjJ6nhFYiTJ1KI5u7i8MvLPznysBGSD/view?usp=sharing
  artifact_local:
  - name: Coq proofs
    url: https://github.com/kaist-cp/smr-verification

  abstract:
    "Formal verification is an effective method to address the challenge of
    designing correct and efficient concurrent data structures. But
    verification efforts often ignore <em>memory reclamation</em>, which
    involves nontrivial synchronization between concurrent accesses and
    reclamation. When incorrectly implemented, it may lead to critical safety
    errors such as use-after-free and the ABA problem. Semi-automatic safe
    memory reclamation schemes such as hazard pointers and RCU encapsulate the
    complexity of manual memory management in modular interfaces. However, this
    modularity has not been carried over to formal verification.
    <br />
    We propose modular specifications of hazard pointers and RCU, and formally
    verify realistic implementations of them in concurrent separation logic.
    Specifically, we design abstract predicates for hazard pointers that
    capture the meaning of <em>validating</em> the protection of nodes, and
    those for RCU that support <em>optimistic traversal</em> to possibly
    retired nodes. We demonstrate that the specifications indeed facilitate
    modular verification in three criteria: compositional verification, general
    applicability, and easy integration. In doing so, we present the first
    formal verification of Harris's list, the Harris-Michael list, the
    Chase-Lev deque, and RDCSS with reclamation. We report the Coq
    mechanization of all our results in the Iris separation logic framework."

- title: "Applying Hazard Pointers to More Concurrent Data Structures"
  authors: [
    "jaehwang.jung",
    "janggun.lee",
    "jeonghyeon.kim",
    "jeehoon.kang",
  ]
  venue: "ACM Symposium on Parallelism in Algorithms and Architectures"
  venue_short: "SPAA"
  year: 2023
  tags: [
    "gc",
  ]
  doi: 10.1145/3558481.3591102
  website: /gc
  copy_local: https://drive.google.com/file/d/1t2SkkT2sV2bky3sLrhkBEahAzmwarjwz/view?usp=sharing
  copy_publisher: https://dl.acm.org/doi/10.1145/3558481.3591102
  artifact_local:
  - name: development
    url: https://github.com/kaist-cp/hp-plus
  - name: benchmark
    url: https://github.com/kaist-cp/smr-benchmark

  abstract:
    "Hazard pointers is a popular semi-manual memory reclamation scheme for
    concurrent data structures, where each accessing thread announces the
    protection of each object to access and validates that the pointer is not
    already freed. Validation is typically done by <em>over-approximating</em>
    unreachability: if an object seems to be unreachable from the root of the
    data structure, the protecting thread decides not to access the object as
    it might have been freed. However, many efficient data structures are
    incompatible with validation by over-approximation as their <em>optimistic
    traversal</em> strategy intentionally ignores the warning of unreachability
    to achieve better performance.
    <br />
    We design HP++, an extension to
    hazard pointers that supports optimistic traversal. The key idea is
    <em>under-approximating</em> unreachability during validation and
    <em>patching up</em> the potentially unsafe accesses arising from
    false-negatives. Thanks to optimistic traversal, data structures with HP++
    outperform the same-purpose data structures with HP under contention while
    consuming a similar amount of memory."

  changelog:
  - "Figure 8: Optimized HP++ SkipList."
  - "Figure 9: Fixed Y-axis labels."
  - "Algorithm 4: Fixed the ABA problem involving anchor_next."

- title: "Memento: A Framework for Detectable Recoverability in Persistent Memory"
  authors: [
    "kyeongmin.cho",
    "seungmin.jeon",
    "Azalea Raad",
    "jeehoon.kang",
  ]
  venue: "ACM SIGPLAN conference on Programming Languages Design and Implementation"
  venue_short: "PLDI"
  year: 2023
  tags: [
    "pmem",
    "memento",
  ]
  doi: 10.1145/3591232
  copy_local: https://drive.google.com/file/d/1LaXKo1w3fHF2-ra7EA5d24ucCx1kRE3Q/view?usp=share_link
  artifact_local:
  - name: development
    url: https://github.com/kaist-cp/memento
  website: /pmem

  abstract: "Persistent memory (PM) is an emerging class of storage technology that combines the performance
            of DRAM with the durability of SSD, offering the best of both worlds. This had led to a surge of
            research on persistent objects in PM. Among such persistent objects, concurrent data structures (DSs)
            are particularly interesting thanks to their performance and scalability. One of the most widely used
            correctness criteria for persistent concurrent DSs is <em>detectable recoverability</em>, ensuring both
            thread safety (for correctness in non-crashing concurrent executions) and crash consistency (for
            correctness in crashing executions). However, the existing approaches to designing detectably recoverable
            concurrent DSs are either limited to simple algorithms or suffer from high runtime overheads.
            <br />
            We present Memento: a <em>general</em> and <em>high-performance</em> programming framework for detectably
            recoverable concurrent DSs in PM. To ensure general applicability to various DSs, Memento supports
            primitive operations such as checkpoint and compare-and-swap and their composition with control constructs.
            To ensure high performance, Memento employs a timestamp-based recovery strategy that requires fewer writes
            and flushes to PM than the existing approaches. We formally prove that Memento ensures detectable
            recoverability in the presence of crashes. To showcase Memento, we implement a lock-free stack, list, queue,
            and hash table, and a combining queue that detectably recovers from random crashes in stress tests and
            performs comparably to existing hand-tuned persistent DSs with and without detectable recoverability.
            "

- title: "ShakeFlow: Functional Hardware Description with Latency-Insensitive Interface Combinators"
  authors: [
    "sungsoo.han",
    "minseong.jang",
    "jeehoon.kang",
  ]
  cofirst_authors: [1, 2]
  venue: "The International Conference on Architectural Support for Programming Languages and Operating Systems"
  venue_short: "ASPLOS"
  year: 2023
  doi: 10.1145/3575693.3575701
  copy_local: https://drive.google.com/file/d/17kBZxz7XgfQ4DjBwW0GvD-e0DHwK1N85/view?usp=sharing
  artifact_local:
  - name: development
    url: https://github.com/kaist-cp/shakeflow

- title: "Compass: Strong and Compositional Library Specifications in Relaxed Memory Separation Logic"
  authors: [
    "Hoang-Hai Dang",
    "jaehwang.jung",
    "jaemin.choi",
    "Duc-Than Nguyen",
    "William Mansky",
    "jeehoon.kang",
    "Derek Dreyer",
  ]
  venue: "ACM SIGPLAN conference on Programming Languages Design and Implementation"
  venue_short: "PLDI"
  year: 2022
  doi: 10.1145/3519939.3523451
  copy_local: https://plv.mpi-sws.org/compass/paper.pdf
  website: https://plv.mpi-sws.org/compass/

- title: "Continuous verification of system of systems with collaborative MAPE-K pattern and probability model slicing"
  authors: [
    "Jiyoung Song",
    "jeehoon.kang",
    "Sangwon Hyun",
    "Eunkyoung Jee",
    "Doo-Hwan Bae",
  ]
  venue: "Information and Software Technology"
  year: 2022
  doi: 10.1016/j.infsof.2022.106904

- title: "Simuliris: A Separation Logic Framework for Verifying Concurrent Program Optimizations"
  authors: [
    "Lennard Gäher",
    "Michael Sammler",
    "Simon Spies",
    "Ralf Jung",
    "Hoang-Hai Dang",
    "Robbert Krebbers",
    "jeehoon.kang",
    "Derek Dreyer",
  ]
  venue: "ACM SIGPLAN Symposium on Principles of Programming Languages"
  venue_short: "POPL"
  year: 2022
  status: "**Distinguished Paper Award**"
  doi: 10.1145/3498689
  copy_local: https://iris-project.org/pdfs/2022-popl-simuliris.pdf
  copy_publisher: https://dl.acm.org/doi/abs/10.1145/3498689
  website: https://iris-project.org/

- title: "Revamping Hardware Persistency Models: View-Based and Axiomatic Persistency Models for Intel-x86 and Armv8"
  authors: [
    "kyeongmin.cho",
    "Sung-Hwan Lee",
    "Azalea Raad",
    "jeehoon.kang",
  ]
  venue: "ACM SIGPLAN conference on Programming Languages Design and Implementation"
  venue_short: "PLDI"
  year: 2021

  tags: [
    "pmem",
  ]
  doi: 10.1145/3453483.3454027
  copy_local: https://drive.google.com/file/d/1C3j8mlfcyuFUW16J-BSiZ6h_aJdq_s5d/view?usp=sharing
  artifact_local:
  - name: proof
    url: https://github.com/kaist-cp/view-hw
  - name: model checker
    url: https://github.com/kaist-cp/rmem-persistency
  website: /pmem

  abstract: "Non-volatile memory (NVM) is a cutting-edge storage technology that promises the
             performance of DRAM with the durability of SSD. Recent work has proposed several
             <em>persistency models</em> for mainstream architectures such as Intel-x86 and Armv8,
             describing the order in which writes are propagated to NVM. However, these models have
             several limitations; most notably, they either lack operational models or do not support
             persistent synchronization patterns.
             <br />
             We close this gap by revamping the existing persistency models. First, inspired by the
             recent work on promising semantics, we propose a <em>unified operational style</em> for
             describing  persistency using <em>views</em>, and develop view-based operational
             persistency models for Intel-x86 and Armv8, thus presenting the <em>first</em> operational
             model for Armv8 persistency. Next, we propose a <em>unified axiomatic style</em> for
             describing hardware persistency, allowing us to recast and repair the existing axiomatic
             models of Intel-x86 and Armv8 persistency. We prove that our axiomatic models are equivalent
             to the authoritative semantics reviewed by Intel and Arm engineers. We further prove that
             each axiomatic hardware persistency model is equivalent to its operational counterpart.
             Finally, we develop a persistent model checking algorithm and tool, and use it to verify
             several representative examples."

- title: "A Marriage of Pointer- and Epoch-Based Reclamation"
  authors: [
    "jeehoon.kang",
    "jaehwang.jung",
  ]
  venue: "ACM SIGPLAN conference on Programming Languages Design and Implementation"
  venue_short: "PLDI"
  year: 2020

  tags: [
    "gc",
  ]
  website: /gc

  doi: 10.1145/3385412.3385978
  copy_local: https://drive.google.com/file/d/1PlTzqi1U9bhEJRBXc8VzegFUsO57Cydh
  artifact_local:
  - name: benchmark
    url: https://github.com/kaist-cp/smr-benchmark

  abstract: "All pointer-based nonblocking concurrent data structures should deal with the problem
             of <em>safe memory reclamation</em>: before reclaiming a memory block, a thread should
             ensure no other threads hold a local pointer to the block that may later be
             dereferenced.  Various safe memory reclamation schemes have been proposed in the
             literature, but none of them satisfy the following desired properties at the same time:
             <em>(i) robust</em>: a non-cooperative thread does not prevent the other threads from
             reclaiming an unbounded number of blocks; <em>(ii) fast</em>: it does not incur
             significant time overhead; <em>(iii) compact</em>: it does not incur significant space
             overhead; <em>(iv) self-contained</em>: it neither relies on special hardware/OS
             supports nor intrusively affects execution environments; and <em>(v) widely
             applicable</em>: it supports many data structures.
             <br />
             We introduce PEBR, which we believe is the first scheme that satisfies all the
             properties above.  PEBR is inspired by Snowflake's hybrid design of pointer- and
             epoch-based reclamation schemes (PBR and EBR, resp.) that is mostly robust, fast, and
             compact but neither self-contained nor widely applicable.  To achieve
             self-containedness, we design algorithms using only the standard C/C++ concurrency
             features and process-wide memory fence.  To achieve wide applicability, we characterize
             PEBR's requirement for safe reclamation that is satisfied by a variety of data
             structures, including Harris's and Harris-Herlihy-Shavit's lists that are not supported
             by PBR.  We experimentally evaluate whether PEBR is fast and robust using
             microbenchmarks, for which PEBR performs comparably to the state-of-the-art schemes."

- title: "CompCertM: CompCert with Lightweight Modular Verification and Multi-Language Linking"
  authors: [
    "Youngju Song",
    "Minki Cho",
    "Dongjoo Kim",
    "Yonghyun Kim",
    "jeehoon.kang",
    "Chung-Kil Hur",
  ]
  venue: "ACM SIGPLAN Symposium on Principles of Programming Languages"
  venue_short: "POPL"
  year: 2020
  doi: 10.1145/3371091
  copy_local: https://sf.snu.ac.kr/publications/compcertm.pdf
  website: https://sf.snu.ac.kr/compcertm/

- title: "Stacked Borrows: An Aliasing Model for Rust"
  authors: [
    "Ralf Jung",
    "Hoang-Hai Dang",
    "jeehoon.kang",
    "Derek Dreyer",
  ]
  venue: "ACM SIGPLAN Symposium on Principles of Programming Languages"
  venue_short: "POPL"
  year: 2020
  doi: 10.1145/3371109
  copy_local: https://plv.mpi-sws.org/rustbelt/stacked-borrows/paper.pdf
  website: https://plv.mpi-sws.org/rustbelt/stacked-borrows/

- title: "Enveloping Implicit Assumptions of Intrusive Data Structures within Ownership Type System"
  authors: [
    "Keunhong Lee",
    "jeehoon.kang",
    "Wonsup Yoon",
    "Joongi Kim",
    "Sue Moon",
  ]
  venue: "Workshop on Programming Languages and Operating Systems"
  venue_short: "PLOS"
  year: 2019

  doi: 10.1145/3365137.3365403
  copy_publisher: https://dl.acm.org/doi/10.1145/3365137.3365403

- title: "Promising-ARM/RISC-V: a simpler and faster operational concurrency model"
  authors: [
    "Christopher Pulte",
    "Jean Pichon-Pharabod",
    "jeehoon.kang",
    "Sung-Hwan Lee",
    "Chung-Kil Hur",
  ]
  venue: "ACM SIGPLAN conference on Programming Languages Design and Implementation"
  venue_short: "PLDI"
  year: 2019

  doi: 10.1145/3314221.3314624
  copy_local: https://sf.snu.ac.kr/publications/promising-arm-riscv.pdf
  website: https://sf.snu.ac.kr/promising-arm-riscv/

- title: "Reconciling low-level features of C with compiler optimizations"
  authors: [
    "jeehoon.kang",
  ]
  venue: "Department of Computer Science and Engineering, Seoul National University, Korea"
  venue_short: "Ph.D. Dissertation"
  year: 2019

  handle: 10371/151979
  copy_local: https://sf.snu.ac.kr/jeehoon.kang/thesis/jeehoon.kang.phd.thesis.pdf
  website: https://sf.snu.ac.kr/jeehoon.kang/thesis/

- title: "Crellvm: Verified Credible Compilation for LLVM"
  authors: [
    "jeehoon.kang",
    "Yoonseung Kim",
    "Youngju Song",
    "Juneyoung Lee",
    "Sanghoon Park",
    "Mark Dongyeon Shin",
    "Yonghyun Kim",
    "Sungkeun Cho",
    "Joonwon Choi",
    "Chung-Kil Hur",
    "Kwangkeun Yi",
  ]
  cofirst_authors: [1, 2, 3]
  venue: "ACM SIGPLAN conference on Programming Languages Design and Implementation"
  venue_short: "PLDI"
  year: 2018

  doi: 10.1145/3192366.3192377
  copy_local: https://sf.snu.ac.kr/publications/crellvm.pdf
  copy_publisher: https://dl.acm.org/citation.cfm?id=3192377
  website: https://sf.snu.ac.kr/crellvm/

- title: "Repairing Sequential Consistency in C/C++11"
  authors: [
    "Ori Lahav",
    "Viktor Vafeiadis",
    "jeehoon.kang",
    "Chung-Kil Hur",
    "Derek Dreyer",
  ]
  venue: "ACM SIGPLAN conference on Programming Languages Design and Implementation"
  venue_short: "PLDI"
  year: 2017
  status: "**Distinguished Paper Award**"

  doi: 10.1145/3140587.3062352
  copy_local: https://plv.mpi-sws.org/scfix/paper.pdf
  copy_publisher: https://dl.acm.org/citation.cfm?id=3062352
  website: https://plv.mpi-sws.org/scfix/

- title: "A Promising Semantics for Relaxed-Memory Concurrency"
  authors: [
    "jeehoon.kang",
    "Chung-Kil Hur",
    "Ori Lahav",
    "Viktor Vafeiadis",
    "Derek Dreyer",
  ]
  venue: "ACM SIGPLAN Symposium on Principles of Programming Languages"
  venue_short: "POPL"
  year: 2017

  doi: 10.1145/3009837.3009850
  copy_local: https://sf.snu.ac.kr/publications/promising.pdf
  copy_publisher: https://dl.acm.org/citation.cfm?id=3009850
  website: https://sf.snu.ac.kr/promise-concurrency/

- title: "Lightweight Verification of Separate Compilation"
  authors: [
    "jeehoon.kang",
    "Yoonseung Kim",
    "Chung-Kil Hur",
    "Derek Dreyer",
    "Viktor Vafeiadis",
  ]
  venue: "ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages"
  venue_short: "POPL"
  year: 2016

  doi: 10.1145/2837614.2837642
  copy_local: https://sf.snu.ac.kr/publications/sepcompcert.pdf
  copy_publisher: https://dl.acm.org/citation.cfm?id=2837642
  website: https://sf.snu.ac.kr/sepcompcert/

- title: "A Formal C Memory Model Supporting Integer-Pointer Casts"
  authors: [
    "jeehoon.kang",
    "Chung-Kil Hur",
    "William Mansky",
    "Dmitri Garbuzov",
    "Steve Zdancewic",
    "Viktor Vafeiadis",
  ]
  venue: "ACM SIGPLAN Conference on Programming Languages Design and Implementation"
  venue_short: "PLDI"
  year: 2015

  doi: 10.1145/2813885.2738005
  copy_local: https://sf.snu.ac.kr/publications/intptrcast.pdf
  copy_publisher: https://dl.acm.org/citation.cfm?id=2738005
  website: https://sf.snu.ac.kr/intptrcast/

- title: "Global Sparse Analysis Framework"
  authors: [
    "Hakjoo Oh",
    "Kihong Heo",
    "Wonchan Lee",
    "Woosuk Lee",
    "Daejun Park",
    "jeehoon.kang",
    "Kwangkeun Yi",
  ]
  venue: "ACM Transactions on Programming Languages and Systems Volume 36, Issue 3"
  venue_short: "TOPLAS"
  year: 2014

  doi: 10.1145/2590811
  copy_publisher: https://dl.acm.org/citation.cfm?id=2590811
  website: http://ropas.snu.ac.kr/sparseanalysis/

- title: "A Dice Rolling Game on a Set of Tori"
  authors: [
    "jeehoon.kang",
    "Suh-Ryung Kim",
    "Boram Park",
  ]
  venue: "Electrical Journal of Combinatorics Volume 19, Issue 1"
  year: 2012

  doi: 10.37236/2082
  copy_publisher: https://www.combinatorics.org/ojs/index.php/eljc/article/view/v19i1p54
